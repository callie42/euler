//
//  euler2.swift
//  euler
//
//  Created by Calliope on 14/9/17.
//  Copyright Â© 2017 crc. All rights reserved.
//

import Foundation

//
//   Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting
// with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
//   By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
// even-valued terms.
//

func euler2() -> Void {
  print("PE2: Start")
  
  // Even Fibonacci numbers
  var fibonacci = [1,2]
  
  // First generate fibonacci numbers under 4000000
  while fibonacci.last! < 4000000 {
    fibonacci.append(fibonacci.last! + fibonacci[fibonacci.count - 2])
  }
  
  // An efficiency would be take every 3rd number, starting from 2, instead
  var sumFibonacciEven = 0
  for i in fibonacci {
    if i % 2 == 0 {
      sumFibonacciEven += i
    }
  }
  
  print("Sum of evens = \(sumFibonacciEven)")
  print("PE2: End\n")
}
