//
//  euler12.swift
//  euler
//
//  Created by Callie on 15/9/17.
//  Copyright Â© 2017 crc. All rights reserved.
//

import Foundation


//
//  The sequence of triangle numbers is generated by adding the natural numbers. So
//  the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
//    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
//  Let us list the factors of the first seven triangle numbers:
//
//     1: 1
//     3: 1,3
//     6: 1,2,3,6
//    10: 1,2,5,10
//    15: 1,3,5,15
//    21: 1,3,7,21
//    28: 1,2,4,7,14,28
//
//  We can see that 28 is the first triangle number to have over five divisors.
//
//  What is the value of the first triangle number to have over five hundred divisors?


// Given a number, how many integra divisors does it have
func countDivisors(_ x: Int) -> Int {
  if x == 1 {
    return 1
  }
  
  var count = 0
  var i = 1
  // Basic counting of the divisors
  // Track the first divisor, because that can limit how high we count
  while i <= Int(sqrt(Double(x))) {
    if x % i == 0 {
      count += 2
    }
    i += 1
  }
  return count
}


func euler12() -> Void {
  print("PE12: Start")
  print("PE12: Highly divisible triangular number")
  
  
  // Generate triangle numbers, then test the number of divisors, looking for one with over 500
  var candidate = 1
  var count = 1
  while true {
    if countDivisors(candidate) > 500 {
      break
    }
    count += 1
    candidate += count
  }
  
  print("PE12: Highly divisible triangular number \(candidate)")
  print("PE12: End\n")
}
